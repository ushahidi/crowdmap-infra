---
- name: Generate deployment snapshots
  hosts: snapshot-source
  vars:
    # - deployments_file: False
    - snapshot_env: "{{ environment_name }}"
    - db_prefix: "crowdma_main_"
  tags:
    - snapshot
  tasks:
    - name: Set facts
      set_fact:
        snapshot_name: "{{ snapshot_env }}-{{ ansible_date_time.iso8601 }}"

    - name: Ensure s3 bucket is ready
      s3_bucket:
        name: "{{ snapshot_bucket }}"
        aws_access_key: "{{ snapshot_aws_access_key }}"
        aws_secret_key: "{{ snapshot_aws_secret_key }}"
        region: "{{ snapshot_region }}"
        state: present
        tags:
          ush-product: "crowdmap"
      delegate_to: localhost

    - name: Set bucket lifecycle to expire objects
      s3_lifecycle:
        name: "{{ snapshot_bucket }}"
        aws_access_key: "{{ snapshot_aws_access_key }}"
        aws_secret_key: "{{ snapshot_aws_secret_key }}"
        region: "{{ snapshot_region }}"
        expiration_days: 3
        prefix: ""
        status: enabled
        state: present
      delegate_to: localhost

    - name: Load deployments file
      set_fact:
        deployments_list: "{{ lookup('file', deployments_file).split('\n') }}"

    - name: Debug - output deployments list to console
      debug:
         msg: "Deployments have been read as: {{ deployments_list }}"

    - name: Create temporary snapshot directory
      tempfile:
        state: directory
        suffix: snapshot
      register: snapshot_temp

    - name: Create local temporary snapshot directory
      tempfile:
        state: directory
        suffix: snapshot
      register: local_snapshot_temp
      delegate_to: localhost

    - name: Snapshotting
      block:
        - name: Output snapshot name
          debug:
            msg: "Creating snapshot {{ snapshot_name }} in bucket {{ snapshot_bucket }}"

        - name: Dump main db
          shell: "mysqldump -h {{ source_db_host }} -u {{ source_db_user }} -p{{ source_db_password }} --single-transaction {{ source_db_name }} | gzip > {{ snapshot_temp.path }}/{{ source_db_name }}.sql.gz"
          when: skip_main_db is not defined

        - name: Fetch db dump
          fetch:
            flat: yes
            src: "{{ snapshot_temp.path }}/{{ source_db_name }}.sql.gz"
            dest: "{{ local_snapshot_temp.path}}/{{ source_db_name }}.sql.gz"
          when: skip_main_db is not defined

        - name: Upload main db to s3
          aws_s3:
            aws_access_key: "{{ snapshot_aws_access_key }}"
            aws_secret_key: "{{ snapshot_aws_secret_key }}"
            bucket: "{{ snapshot_bucket }}"
            region: "{{ snapshot_region }}"
            src: "{{ local_snapshot_temp.path }}/{{ source_db_name }}.sql.gz"
            object: "{{ snapshot_name }}/{{ source_db_name }}.sql.gz"
            mode: put
          delegate_to: localhost
          when: skip_main_db is not defined

        - name: Export deployments
          include_tasks: tasks/snapshot.yml deployment={{ item }}
          with_items: "{{ deployments_list }}"

        - name: Output snapshot name
          debug:
            msg: "Snapshot exported to {{ snapshot_name }} in bucket {{ snapshot_bucket }}"

      # Clean up
      always:
        - name: Delete snapshot temp
          file:
            state: absent
            path: "{{ snapshot_temp.path }}"

        - name: Delete local snapshot temp
          file:
            state: absent
            path: "{{ local_snapshot_temp.path }}"
          delegate_to: localhost


- name: Restore deployment snapshots
  hosts: web
  vars:
    - snapshot_env: "{{ environment_name }}"
    # - on_duplicate: "skip" # skip, overwrite, error
    # - overwrite_env: False
    # - overwrite_force: False
    - source_db_name: crowdma_main
    - force_prod_restore: False
    - db_prefix: "crowdma_main_"
  tags:
    - restore
  pre_tasks:
    - include_tasks: tasks/tf_facts.yml
      when: tf_folder is defined and tf_folder != ""

  tasks:
    - name: Abort if we are in production
      fail:
        msg: "Cannot restore snapshot into the production environment: {{ snapshot_env }}"
      when: not force_prod_restore and (snapshot_env is not defined or snapshot_env.find("prod") != -1) # Verify if this is sufficient

    - name: Check snapshot_name is set
      fail:
        msg: "snapshot_name is not set"
      when: snapshot_name is not defined or not snapshot_name

    - name: install required packages
      apt:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - python-setuptools
          - python-dev
          - libmysqlclient-dev
          - gcc
          # - libffi-dev # Not sure if needed
          - mysql-client
      become: True
      become_user: root

    - name: ensure pip is installed
      easy_install: name=pip state=present
      become: True
      become_user: root

    - name: Ensure python packages are installed
      pip:
        name: "{{ packages }}"
      vars:
        packages:
          - boto
          - boto3
          - botocore
          - python-dateutil
          - MySQL-python
          # - pexpect # this is for shell interactions
      become: True
      become_user: root

    - name: Create temporary snapshot directory
      tempfile:
         state: directory
         suffix: snapshot
      register: snapshot_temp

    - name: Load deployments file
      set_fact:
        deployments_list: "{{ lookup('file', deployments_file).split('\n') }}"

    - name: Debug - output deployments list to console
      debug:
         msg: "Deployments have been read as: {{ deployments_list }}"

    - name: Restoring
      block:
        - name: Copy cloud db to local directory
          aws_s3:
              aws_access_key: "{{ snapshot_aws_access_key }}"
              aws_secret_key: "{{ snapshot_aws_secret_key }}"
              bucket: "{{ snapshot_bucket }}"
              region: "{{ snapshot_region }}"
              object: "{{ snapshot_name }}/{{ source_db_name }}.sql.gz"
              dest: "{{ snapshot_temp.path }}/{{ source_db_name }}.sql.gz"
              mode: get
          when: skip_main_db is not defined

        - name: Import cloud db
          mysql_db:
            login_host: "{{ crowdmap_db_host }}"
            name: "{{ source_db_name }}"
            encoding: "utf8mb4"
            collation: "utf8mb4_unicode_ci"
            state: import
            target: "{{ snapshot_temp.path }}/{{ source_db_name }}.sql.gz" # Apparently mysql_db can decompress the file
          become: true
          become_user: root
          when: skip_main_db is not defined

        - name: Import deployments
        # we may need to use other attributes of these deployments, so copying everything into {{deployment}}
          include_tasks: tasks/restore.yml deployment={{ item }}
          with_items: "{{ deployments_list }}"
          loop_control:
            index_var: "idx"

      # Clean up
      always:
        - name: Delete snapshot temp
          file:
            state: absent
            path: "{{ snapshot_temp.path }}"
